///*
// * Copyright 2012-2014 Amazon.com, Inc. or its affiliates. All Rights Reserved.
// *
// * Licensed under the Apache License, Version 2.0 (the "License").
// * You may not use this file except in compliance with the License.
// * A copy of the License is located at
// *
// *  http://aws.amazon.com/apache2.0
// *
// * or in the "license" file accompanying this file. This file is distributed
// * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// * express or implied. See the License for the specific language governing
// * permissions and limitations under the License.
// */
//
//import java.util.ArrayList;
//import java.util.List;
//import java.util.regex.Pattern;
//
//import org.apache.commons.logging.Log;
//import org.apache.commons.logging.LogFactory;
//import org.apache.spark.api.java.function.FlatMapFunction;
//import org.apache.spark.api.java.function.Function2;
//import org.apache.spark.api.java.function.PairFunction;
//import org.apache.spark.streaming.Duration;
//import org.apache.spark.streaming.api.java.JavaDStream;
//import org.apache.spark.streaming.api.java.JavaPairDStream;
//import org.apache.spark.streaming.api.java.JavaStreamingContext;
//import org.apache.spark.streaming.kinesis.KinesisUtils;
//import org.apache.spark.streaming.kinesis.KinesisInputDStream;
//
//
//import com.amazonaws.auth.DefaultAWSCredentialsProviderChain;
//import com.amazonaws.services.kinesis.AmazonKinesisClient;
//import com.amazonaws.services.kinesis.model.DescribeStreamRequest;
//import com.amazonaws.services.kinesis.model.DescribeStreamResult;
//import com.amazonaws.services.kinesis.model.GetRecordsRequest;
//import com.amazonaws.services.kinesis.model.GetRecordsResult;
//import com.amazonaws.services.kinesis.model.GetShardIteratorRequest;
//import com.amazonaws.services.kinesis.model.GetShardIteratorResult;
//import com.amazonaws.services.kinesis.model.Record;
//import com.amazonaws.services.kinesis.model.Shard;
//import com.google.common.collect.Lists;
//import scala.collection.Seq;
//
//public class KinesisWorker{
//
//    private static AmazonKinesisClient kinesisClient;
//    private static final Log logger = LogFactory.getLog(KinesisClient.class);
//
//    private static final Pattern SPACE = Pattern.compile(" ");
//
//    public static void main(String[] args) throws Exception {
//        final String myStreamName = "sparkStream";
//
//        while (true) {           
//		    // Create the context with a 1 second batch size
//		    JavaStreamingContext streamingContext = new JavaStreamingContext(
//		    		"local[1]", 
//		    		"KinesisWorker",
//		            new Duration(1000),
//		            null,
//		            //System.getenv("SPARK_HOME"),	            
//		            //JavaStreamingContext.jarOfClass(KinesisWorker.class),
//		            null,
//		            null
//		            );
//
//		    KinesisInputDStream stream = KinesisUtils.createStream(streamingContext);
//		    // Create a NetworkInputDStream on target ip:port and count the
//		    // words in input stream of \n delimited text (eg. generated by 'nc')
//		    JavaDStream<String> lines = 
//		    		//streamingContext.socketTextStream(args[1], Integer.parseInt(args[2]));
//		    JavaDStream<String> words = lines.flatMap(new FlatMapFunction<String, String>() {
//		      @Override
//		      public Iterable<String> call(String x) {
//		        return Lists.newArrayList(SPACE.split(x));
//		      }
//		    });
//		    JavaPairDStream<String, Integer> wordCounts = words.map(
//		      new PairFunction<String, String, Integer>() {
//		        @Override
//		        public Tuple2<String, Integer> call(String s) {
//		        	return new Tuple2<String, Integer>(s, 1);
//		        }
//		      }).reduceByKey(new Function2<Integer, Integer, Integer>() {
//			        @Override
//			        public Integer call(Integer i1, Integer i2) {
//			          return i1 + i2;
//			        }
//		      });
//
//	    	wordCounts.print();
//	    	streamingContext.start();
//	    	streamingContext.awaitTermination();
//
//        	System.out.println("found more records: " + records);
//			  
//			try {
//			    Thread.sleep(1000);
//			} 
//			catch (InterruptedException exception) {
//			    throw new RuntimeException(exception);
//			}
//			  
//			shardIterator = result.getNextShardIterator();
//        }
//    }
//}